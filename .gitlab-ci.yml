stages:
  - prepare
  - test
  - build

variables:
  TARGET_BRANCH: "CICD_2"
  # Docker configuration
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""
  DOCKER_HOST: tcp://docker:2375
  
  # Docker image configuration
  IMAGE_NAME: "team03-webapi"
  
  # Git configuration
  GIT_STRATEGY: none
  GIT_USERNAME: "fsa_HongTL"

# Default configuration for all jobs
default:
  image: mcr.microsoft.com/dotnet/sdk:8.0

prepare:
  stage: prepare
  image: alpine:latest
  rules:
    - if: $CI_COMMIT_BRANCH == $TARGET_BRANCH
  script:
    - apk add --no-cache git curl jq
    # Configure Git authentication with personal token
    - echo "Configuring Git credentials..."
    - git config --global credential.helper store
    - echo "https://${GIT_USERNAME}:${GIT_ACCESS_TOKEN}@git.fa.edu.vn" > ~/.git-credentials
    - git config --global user.name "$GIT_USERNAME"
    - git config --global user.email "$GIT_USERNAME@users.noreply.gitlab.com"
    - echo "Testing Git authentication..."
    - git ls-remote "http://git.fa.edu.vn/hcm25_cpl_net_06/team03_be.git" || echo "Authentication test failed, but continuing"
    - echo "Prepare stage completed successfully"
  tags:
    - cicd

build:
  stage: build
  image: docker:20.10.16
  services:
    - name: docker:20.10.16-dind
      alias: docker
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
  rules:
    - if: $CI_COMMIT_BRANCH == $TARGET_BRANCH
  before_script:
    - apk add --no-cache git curl jq
    # Configure Git authentication with personal token
    - echo "Configuring Git authentication..."
    - git config --global credential.helper store
    - echo "https://${GIT_USERNAME}:${GIT_ACCESS_TOKEN}@git.fa.edu.vn" > ~/.git-credentials
    - git config --global user.name "$GIT_USERNAME"
    - git config --global user.email "$GIT_USERNAME@users.noreply.gitlab.com"
    
    # Clone the repository manually if needed
    - echo "Ensuring we have the repository code..."
    - if [ ! -d ".git" ]; then
        git clone -b $TARGET_BRANCH "http://git.fa.edu.vn/hcm25_cpl_net_06/team03_be.git" . || exit 1;
      else
        git fetch && git checkout $TARGET_BRANCH && git pull;
      fi
    
    # Login to GitLab Container Registry
    - echo "Logging into GitLab Container Registry..."
    - echo $CI_REGISTRY_PASSWORD | docker login $CI_REGISTRY --username $CI_REGISTRY_USER --password-stdin || exit 1
  script:
    - echo "Listing repository contents..."
    - ls -la
    - echo "Current working directory:"
    - pwd
    - echo "Searching for Dockerfile..."
    - find . -name "Dockerfile" -type f
    # Then continue with the Docker build
    - echo "Building Docker image with commit hash $CI_COMMIT_SHA..."
    - DOCKER_DEFAULT_PLATFORM=linux/amd64 docker build -t $IMAGE_NAME:$CI_COMMIT_SHA -t $IMAGE_NAME:latest .
    - docker push $IMAGE_NAME:$CI_COMMIT_SHA
    - docker push $IMAGE_NAME:latest
  tags:
    - cicd
