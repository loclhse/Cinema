stages:
  - prepare
  - test
  - build
  - deploy

variables:
  TARGET_BRANCH: "CICD_2"
  IMAGE_NAME: "$CI_REGISTRY_IMAGE/team03-webapi"
  GIT_STRATEGY: none
  GIT_USERNAME: "fsa_HongTL"

default:
  image: mcr.microsoft.com/dotnet/sdk:8.0

prepare:
  stage: prepare
  image: mcr.microsoft.com/dotnet/sdk:8.0
  rules:
    - if: $CI_COMMIT_BRANCH == $TARGET_BRANCH
  script:
    - apt-get update && apt-get install -y git curl jq
    - echo "Configuring Git credentials..."
    - git config --global credential.helper store
    - echo "https://${GIT_USERNAME}:${GIT_ACCESS_TOKEN}@git.fa.edu.vn" > ~/.git-credentials
    - git config --global user.name "$GIT_USERNAME"
    - git config --global user.email "$GIT_USERNAME@users.noreply.gitlab.com"
    - echo "Testing Git authentication..."
    - git ls-remote "http://git.fa.edu.vn/hcm25_cpl_net_06/team03_be.git" || echo "Authentication test failed, but continuing"
    - echo "Prepare stage completed successfully"
  tags:
    - cicd

build:
  stage: build
  image: mcr.microsoft.com/dotnet/sdk:8.0
  rules:
    - if: $CI_COMMIT_BRANCH == $TARGET_BRANCH
  before_script:
    - apt-get update && apt-get install -y openssh-client curl tar gzip git
    - echo "Configuring Git authentication..."
    - git config --global credential.helper store
    - echo "https://${GIT_USERNAME}:${GIT_ACCESS_TOKEN}@git.fa.edu.vn" > ~/.git-credentials
    - git config --global user.name "$GIT_USERNAME"
    - git config --global user.email "$GIT_USERNAME@users.noreply.gitlab.com"
    - echo "Cloning repository..."
    - git clone -b $TARGET_BRANCH "http://git.fa.edu.vn/hcm25_cpl_net_06/team03_be.git" project_source || exit 1
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - printf '%s\n' "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - eval $(ssh-agent -s)
    - ssh-add ~/.ssh/id_rsa
    - ssh-keyscan -H vps.purintech.id.vn >> ~/.ssh/known_hosts 2>/dev/null || echo "SSH keyscan failed"
  script:
    - echo "Transferring source code to server for Docker build..."
    - ssh -o StrictHostKeyChecking=no fsoftguy@vps.purintech.id.vn "
        mkdir -p ~/docker-builds/team03-build-$(date +%Y%m%d-%H%M%S)
        echo ~/docker-builds/team03-build-$(date +%Y%m%d-%H%M%S) > ~/.last-build-dir
      "
    - BUILD_DIR=$(ssh -o StrictHostKeyChecking=no fsoftguy@vps.purintech.id.vn "cat ~/.last-build-dir")
    - echo "Build directory $BUILD_DIR"
    - echo "Transferring source code to server..."
    - cd project_source
    - tar -czf ../project.tar.gz .
    - cd ..
    - scp -o StrictHostKeyChecking=no project.tar.gz fsoftguy@vps.purintech.id.vn:$BUILD_DIR/
    - |
      ssh -o StrictHostKeyChecking=no fsoftguy@vps.purintech.id.vn "
        BUILD_DIR=\$(ls -d ~/docker-builds/team03-build-* | tail -1)
        echo \"Using build directory: \$BUILD_DIR\"
        
        cd \$BUILD_DIR
        echo 'Moving and extracting source code...'
        mv ~/project.tar.gz .
        tar -xzf project.tar.gz
        rm project.tar.gz
        
        echo 'Setting up Docker environment...'
        export PATH=\"\$HOME/bin:\$PATH\"
        export DOCKER_HOST=\"unix:///run/user/\$(id -u)/docker.sock\"
        
        systemctl --user start docker.service 2>/dev/null || echo 'Docker service already running'
        sleep 3
        
        echo 'Testing Docker access...'
        if docker version > /dev/null 2>&1; then
          echo 'Rootless Docker accessible!'
          echo \"Docker version: \$(docker version --format '{{.Server.Version}}')\"
        else
          echo 'Docker not accessible!'
          echo 'Checking Docker service status:'
          systemctl --user status docker.service
          exit 1
        fi
        
        echo 'Checking Dockerfile...'
        if [ ! -f Dockerfile ]; then
          echo 'ERROR: Dockerfile not found!'
          ls -la
          exit 1
        fi
        
        echo 'Logging into GitLab Container Registry...'
        echo '$CI_JOB_TOKEN' | docker login '$CI_REGISTRY' --username gitlab-ci-token --password-stdin
        
        echo 'Building Docker image...'
        docker build -t '$IMAGE_NAME:latest' -t '$IMAGE_NAME:$CI_COMMIT_SHA' .
        
        if [ \$? -eq 0 ]; then
          echo 'Docker build successful!'
          
          echo 'Pushing images to registry...'
          docker push '$IMAGE_NAME:latest'
          docker push '$IMAGE_NAME:$CI_COMMIT_SHA'
          
          if [ \$? -eq 0 ]; then
            echo 'Push successful!'
            echo 'BUILD_STATUS=SUCCESS' > ~/build_status.txt
          else
            echo 'Push failed!'
            echo 'BUILD_STATUS=PUSH_FAILED' > ~/build_status.txt
          fi
        else
          echo 'Docker build failed!'
          echo 'BUILD_STATUS=BUILD_FAILED' > ~/build_status.txt
        fi
        
        echo 'Cleaning up build directory...'
        cd ~
        rm -rf \$BUILD_DIR
        
        echo 'Build process completed!'
      "
    - ssh -o StrictHostKeyChecking=no fsoftguy@vps.purintech.id.vn "cat ~/build_status.txt 2>/dev/null || echo 'BUILD_STATUS=UNKNOWN'" > build_status.txt
    - cat build_status.txt
  artifacts:
    reports:
      dotenv: build_status.txt
    expire_in: 1 hour
  tags:
    - cicd

deploy:
  stage: deploy
  image: alpine:latest
  rules:
    - if: $CI_COMMIT_BRANCH == $TARGET_BRANCH
  before_script:
    - apk add --no-cache openssh-client curl
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "Creating SSH key file..."
    - printf '%s\n' "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - eval $(ssh-agent -s)
    - ssh-add ~/.ssh/id_rsa
    - ssh-keyscan -H vps.purintech.id.vn >> ~/.ssh/known_hosts 2>/dev/null || echo "SSH keyscan failed, using StrictHostKeyChecking=no"
  script:
    - echo "Deploying Docker image to server..."
    - |
      if [ "${BUILD_STATUS:-UNKNOWN}" != "SUCCESS" ]; then
        echo "Cannot deploy - build was not successful!"
        echo "Build status: ${BUILD_STATUS:-UNKNOWN}"
        echo "Please check build stage logs and fix any issues."
        exit 1
      fi
    - echo "Build was successful, proceeding with deployment..."
    - echo "Testing SSH connection..."
    - ssh -o StrictHostKeyChecking=no fsoftguy@vps.purintech.id.vn "echo 'SSH connection successful'"
    - |
      ssh -o StrictHostKeyChecking=no fsoftguy@vps.purintech.id.vn "
        echo 'Starting deployment process...'
        
        export PATH=\"\$HOME/bin:\$PATH\"
        export DOCKER_HOST=\"unix:///run/user/\$(id -u)/docker.sock\"
        
        systemctl --user start docker.service 2>/dev/null || echo 'Docker service already running'
        sleep 2
        
        if docker version > /dev/null 2>&1; then
          echo 'Rootless Docker accessible!'
        else
          echo 'Docker not accessible!'
          echo 'Checking Docker service status:'
          systemctl --user status docker.service
          exit 1
        fi
        
        echo 'Logging into GitLab Container Registry...'
        echo '$CI_JOB_TOKEN' | docker login '$CI_REGISTRY' --username gitlab-ci-token --password-stdin
        
        echo 'Pulling latest image from registry...'
        docker pull '$IMAGE_NAME:latest'
        
        echo 'Stopping old container if exists...'
        docker stop team03-webapi 2>/dev/null || echo 'No existing container to stop'
        docker rm team03-webapi 2>/dev/null || echo 'No existing container to remove'
        
        echo 'Starting new container...'
        docker run -d \
          --name team03-webapi \
          -p 8080:8080 \
          --restart unless-stopped \
          '$IMAGE_NAME:latest'
        
        echo 'Verifying deployment...'
        sleep 5
        if docker ps | grep team03-webapi > /dev/null; then
          echo 'Container is running successfully!'
          docker ps --format 'table {{.Names}}\t{{.Status}}\t{{.Ports}}' | grep team03-webapi
          
          echo 'Checking application health...'
          sleep 10
          curl -f http://localhost:8080 > /dev/null 2>&1 && echo 'Application is responding!' || echo 'Application endpoint not available yet'
          
          echo ''
          echo '===== DEPLOYMENT SUCCESSFUL ====='
          echo 'Application URL: http://vps.purintech.id.vn:8080'
          echo 'API Base URL: http://vps.purintech.id.vn:8080/api'
          echo 'Swagger UI: http://vps.purintech.id.vn:8080/swagger'
          echo 'Health Check: http://vps.purintech.id.vn:8080/health'
          echo '=================================='
          echo 'Your application is now live and accessible!'
          echo ''
        else
          echo 'Container failed to start!'
          echo 'Docker logs:'
          docker logs team03-webapi 2>/dev/null || echo 'No logs available'
          exit 1
        fi
      "
  tags:
    - cicd
