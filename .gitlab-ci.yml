stages:
  - prepare
  - test
  - build

variables:
  TARGET_BRANCH: "CICD_2"
  IMAGE_NAME: "git.fa.edu.vn/hcm25_cpl_net_06/team03_be/team03-webapi"
  GIT_STRATEGY: none
  GIT_USERNAME: "fsa_HongTL"

default:
  image: mcr.microsoft.com/dotnet/sdk:8.0

prepare:
  stage: prepare
  image: mcr.microsoft.com/dotnet/sdk:8.0
  rules:
    - if: $CI_COMMIT_BRANCH == $TARGET_BRANCH
  script:
    - apt-get update && apt-get install -y git curl jq
    - echo "Configuring Git credentials..."
    - git config --global credential.helper store
    - echo "https://${GIT_USERNAME}:${GIT_ACCESS_TOKEN}@git.fa.edu.vn" > ~/.git-credentials
    - git config --global user.name "$GIT_USERNAME"
    - git config --global user.email "$GIT_USERNAME@users.noreply.gitlab.com"
    - echo "Testing Git authentication..."
    - git ls-remote "http://git.fa.edu.vn/hcm25_cpl_net_06/team03_be.git" || echo "Authentication test failed, but continuing"
    - echo "Prepare stage completed successfully"
  tags:
    - cicd

build:
  stage: build
  image: mcr.microsoft.com/dotnet/sdk:8.0
  rules:
    - if: $CI_COMMIT_BRANCH == $TARGET_BRANCH
  before_script:
    - apt-get update && apt-get install -y openssh-client curl tar gzip git
    - echo "Configuring Git authentication..."
    - git config --global credential.helper store
    - echo "https://${GIT_USERNAME}:${GIT_ACCESS_TOKEN}@git.fa.edu.vn" > ~/.git-credentials
    - git config --global user.name "$GIT_USERNAME"
    - git config --global user.email "$GIT_USERNAME@users.noreply.gitlab.com"
    - echo "Cloning repository..."
    - git clone -b $TARGET_BRANCH "http://git.fa.edu.vn/hcm25_cpl_net_06/team03_be.git" project_source || exit 1
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - printf '%s\n' "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - eval $(ssh-agent -s)
    - ssh-add ~/.ssh/id_rsa
    - ssh-keyscan -H vps.purintech.id.vn >> ~/.ssh/known_hosts 2>/dev/null || echo "SSH keyscan failed"
  script:
    - echo "Smart deployment - Docker cleanup without sudo..."
    - |
      timeout 600 ssh -o StrictHostKeyChecking=no -o ConnectTimeout=30 -o ServerAliveInterval=60 fsoftguy@vps.purintech.id.vn "
        set -e
        echo 'Checking current disk space...'
        df -h ~/
        
        echo 'Performing Docker cleanup (no sudo required)...'
        
        # Setup Docker environment
        export PATH=\"\$HOME/bin:\$PATH\"
        export DOCKER_HOST=\"unix:///run/user/\$(id -u)/docker.sock\"
        
        systemctl --user start docker.service 2>/dev/null || echo 'Docker service already running'
        sleep 3
        
        # Smart Docker cleanup without sudo
        echo 'Stopping and removing old containers...'
        docker stop \$(docker ps -aq) 2>/dev/null || echo 'No containers to stop'
        docker rm \$(docker ps -aq) 2>/dev/null || echo 'No containers to remove'
        
        # Remove Docker images (keeping base images)
        echo 'Removing custom images only...'
        docker rmi \$(docker images --filter=reference='team03*' -q) 2>/dev/null || echo 'No team03 images to remove'
        
        # Clean up build directories (user space only)
        echo 'Cleaning user build directories...'
        rm -rf ~/docker-builds/* 2>/dev/null || echo 'No build dirs to clean'
        rm -rf ~/team03-* 2>/dev/null || echo 'No team03 dirs to clean'
        rm -rf ~/project.tar.gz 2>/dev/null || echo 'No project archive to clean'
        
        # Clean user temp files
        echo 'Cleaning user temp files...'
        rm -rf ~/.cache/* 2>/dev/null || echo 'No cache to clean'
        rm -rf /tmp/tmp.* 2>/dev/null || echo 'No temp files to clean'
        
        echo 'Disk space after cleanup:'
        df -h ~/
        
        echo 'Setting up minimal build environment...'
        BUILD_DIR=~/build
        rm -rf \$BUILD_DIR
        mkdir -p \$BUILD_DIR
        cd \$BUILD_DIR
        
        echo 'Cloning repository with minimal size...'
        git clone -b $TARGET_BRANCH --single-branch --depth 1 \"https://${GIT_USERNAME}:${GIT_ACCESS_TOKEN}@git.fa.edu.vn/hcm25_cpl_net_06/team03_be.git\" .
        
        # Remove git history to save space
        rm -rf .git
        
        echo 'Repository prepared!'
        
        echo 'Testing Docker access...'
        if docker version > /dev/null 2>&1; then
          echo 'Docker accessible!'
        else
          echo 'Docker not accessible!'
          exit 1
        fi
        
        echo 'Building Docker image...'
        docker build -t 'team03-webapi:latest' .
        
        if [ \$? -eq 0 ]; then
          echo 'Docker build successful!'
          
          echo 'Deploying single container...'
          
          # Stop old container
          docker stop team03-webapi 2>/dev/null || echo 'No old container'
          docker rm team03-webapi 2>/dev/null || echo 'Container removed'
          
          # Start new container
          echo 'Starting new container...'
          CONTAINER_ID=\$(docker run -d \\
            --name team03-webapi \\
            -p 8081:8081 \\
            --restart unless-stopped \\
            team03-webapi:latest 2>&1)
          
          if echo \"\$CONTAINER_ID\" | grep -E '^[a-f0-9]{12,}' > /dev/null; then
            echo \"Container started: \$CONTAINER_ID\"
            
            sleep 8
            
            # Test application
            HEALTH_CHECK=\$(curl -s -o /dev/null -w \"%{http_code}\" http://localhost:8081 2>/dev/null || echo '000')
            echo \"Health check: \$HEALTH_CHECK\"
            
            echo ''
            echo '===== DEPLOYMENT SUCCESSFUL ====='
            echo 'Application URL: http://vps.purintech.id.vn:8081'
            echo '=================================='
            echo 'BUILD_STATUS=SUCCESS' > ~/build_status.txt
          else
            echo \"Container start failed: \$CONTAINER_ID\"
            echo 'BUILD_STATUS=DEPLOY_FAILED' > ~/build_status.txt
          fi
        else
          echo 'Docker build failed!'
          echo 'BUILD_STATUS=BUILD_FAILED' > ~/build_status.txt
        fi
        
        echo 'Cleaning up...'
        cd ~
        rm -rf \$BUILD_DIR
        
        echo 'Final disk space:'
        df -h ~/
      "
    - ssh -o StrictHostKeyChecking=no fsoftguy@vps.purintech.id.vn "cat ~/build_status.txt 2>/dev/null || echo 'BUILD_STATUS=UNKNOWN'" > build_status.txt
    - cat build_status.txt
  artifacts:
    reports:
      dotenv: build_status.txt
    expire_in: 1 hour
  tags:
    - cicd
