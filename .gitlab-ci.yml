stages:
  - prepare
  - test
  - build
  - deploy

variables:
  TARGET_BRANCH: "CICD_2"
  # Docker configuration - disable TLS for simplicity
  DOCKER_TLS_CERTDIR: ""
  DOCKER_HOST: tcp://docker:2375
  
  # Package Registry configuration
  IMAGE_NAME: "$CI_REGISTRY_IMAGE/team03-webapi"
  
  # Git configuration
  GIT_STRATEGY: none
  GIT_USERNAME: "fsa_HongTL"

# Default configuration for all jobs
default:
  image: mcr.microsoft.com/dotnet/sdk:8.0

prepare:
  stage: prepare
  image: ubuntu:20.04
  rules:
    - if: $CI_COMMIT_BRANCH == $TARGET_BRANCH
  script:
    - apt-get update && apt-get install -y git curl jq
    # Configure Git authentication with personal token
    - echo "Configuring Git credentials..."
    - git config --global credential.helper store
    - echo "https://${GIT_USERNAME}:${GIT_ACCESS_TOKEN}@git.fa.edu.vn" > ~/.git-credentials
    - git config --global user.name "$GIT_USERNAME"
    - git config --global user.email "$GIT_USERNAME@users.noreply.gitlab.com"
    - echo "Testing Git authentication..."
    - git ls-remote "http://git.fa.edu.vn/hcm25_cpl_net_06/team03_be.git" || echo "Authentication test failed, but continuing"
    - echo "Prepare stage completed successfully"
  tags:
    - cicd

build:
  stage: build
  image: ubuntu:20.04
  rules:
    - if: $CI_COMMIT_BRANCH == $TARGET_BRANCH
  before_script:
    - apt-get update && apt-get install -y git curl openssh-client tar gzip
    # Configure Git authentication
    - echo "Configuring Git authentication..."
    - git config --global credential.helper store
    - echo "https://${GIT_USERNAME}:${GIT_ACCESS_TOKEN}@git.fa.edu.vn" > ~/.git-credentials
    - git config --global user.name "$GIT_USERNAME"
    - git config --global user.email "$GIT_USERNAME@users.noreply.gitlab.com"
    
    # Clone the repository
    - echo "Cloning repository..."
    - git clone -b $TARGET_BRANCH "http://git.fa.edu.vn/hcm25_cpl_net_06/team03_be.git" project_source || exit 1
    
    # Setup SSH for server connection
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan vps.purintech.id.vn >> ~/.ssh/known_hosts
  script:
    - echo "Transferring source code to server..."
    - cd project_source
    - tar -czf ../project.tar.gz .
    - cd ..
    - scp project.tar.gz fsoftguy@vps.purintech.id.vn:/tmp/
    
    - echo "Building Docker image on server..."
    - |
      ssh -o StrictHostKeyChecking=no fsoftguy@vps.purintech.id.vn "
        echo 'Extracting source code...'
        mkdir -p /tmp/team03_build
        cd /tmp/team03_build
        tar -xzf /tmp/project.tar.gz
        
        echo 'Login to GitLab Container Registry...'
        echo $CI_JOB_TOKEN | docker login $CI_REGISTRY --username gitlab-ci-token --password-stdin
        
        echo 'Building Docker image on server...'
        docker build -t $IMAGE_NAME:latest -t $IMAGE_NAME:$CI_COMMIT_SHA .
        
        echo 'Pushing to GitLab Container Registry...'
        docker push $IMAGE_NAME:latest
        docker push $IMAGE_NAME:$CI_COMMIT_SHA
        
        echo 'Cleaning up build files...'
        cd /tmp
        rm -rf team03_build project.tar.gz
      "
  tags:
    - cicd

deploy:
  stage: deploy
  image: ubuntu:20.04
  rules:
    - if: $CI_COMMIT_BRANCH == $TARGET_BRANCH
  before_script:
    - apt-get update && apt-get install -y openssh-client curl
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan vps.purintech.id.vn >> ~/.ssh/known_hosts
  script:
    - echo "Deploying application on server..."
    - |
      ssh -o StrictHostKeyChecking=no fsoftguy@vps.purintech.id.vn "
        echo 'Stopping and removing old container...'
        docker stop team03-webapi || true
        docker rm team03-webapi || true
        
        echo 'Starting new container with latest image...'
        docker run -d --name team03-webapi -p 8080:80 --restart unless-stopped $IMAGE_NAME:latest
        
        echo 'Checking deployment status...'
        docker ps | grep team03-webapi
        
        echo 'Testing application endpoint...'
        sleep 5
        curl -f http://localhost:8080/health || echo 'Health check endpoint not available, but container is running'
      "
  tags:
    - cicd
