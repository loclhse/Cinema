stages:
  - prepare
  - test
  - build
  - deploy

variables:
  TARGET_BRANCH: "CICD_2"
  # Docker configuration with TLS
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_HOST: tcp://docker:2376
  DOCKER_TLS_VERIFY: 1
  DOCKER_CERT_PATH: "$DOCKER_TLS_CERTDIR/client"
  
  # Package Registry configuration
  IMAGE_NAME: "$CI_REGISTRY_IMAGE/team03-webapi"
  
  # Git configuration
  GIT_STRATEGY: none
  GIT_USERNAME: "fsa_HongTL"

# Default configuration for all jobs
default:
  image: mcr.microsoft.com/dotnet/sdk:8.0

prepare:
  stage: prepare
  image: alpine:latest
  rules:
    - if: $CI_COMMIT_BRANCH == $TARGET_BRANCH
  script:
    - apk add --no-cache git curl jq
    # Configure Git authentication with personal token
    - echo "Configuring Git credentials..."
    - git config --global credential.helper store
    - echo "https://${GIT_USERNAME}:${GIT_ACCESS_TOKEN}@git.fa.edu.vn" > ~/.git-credentials
    - git config --global user.name "$GIT_USERNAME"
    - git config --global user.email "$GIT_USERNAME@users.noreply.gitlab.com"
    - echo "Testing Git authentication..."
    - git ls-remote "http://git.fa.edu.vn/hcm25_cpl_net_06/team03_be.git" || echo "Authentication test failed, but continuing"
    - echo "Prepare stage completed successfully"
  tags:
    - cicd

build:
  stage: build
  image: alpine:latest
  rules:
    - if: $CI_COMMIT_BRANCH == $TARGET_BRANCH
  before_script:
    - apk add --no-cache git curl
    # Configure Git authentication
    - echo "Configuring Git authentication..."
    - git config --global credential.helper store
    - echo "https://${GIT_USERNAME}:${GIT_ACCESS_TOKEN}@git.fa.edu.vn" > ~/.git-credentials
    - git config --global user.name "$GIT_USERNAME"
    - git config --global user.email "$GIT_USERNAME@users.noreply.gitlab.com"
    
    # Clone the repository
    - echo "Cloning repository..."
    - git clone -b $TARGET_BRANCH "http://git.fa.edu.vn/hcm25_cpl_net_06/team03_be.git" . || exit 1
    
    # Install Kaniko
    - echo "Downloading Kaniko..."
    - wget -O /kaniko.tar.gz https://github.com/GoogleContainerTools/kaniko/releases/download/v1.9.0/kaniko-amd64.tar.gz
    - tar -xzf /kaniko.tar.gz -C /usr/local/bin/
    
    # Setup Kaniko authentication
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"$CI_REGISTRY\":{\"auth\":\"$(printf "%s:%s" "gitlab-ci-token" "$CI_JOB_TOKEN" | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
  script:
    - echo "Building and pushing with Kaniko..."
    - echo "Building Docker image for $IMAGE_NAME"
    - echo "Current directory contents:"
    - ls -la
    - /usr/local/bin/executor 
      --context $CI_PROJECT_DIR
      --dockerfile $CI_PROJECT_DIR/Dockerfile
      --destination $IMAGE_NAME:latest
      --destination $IMAGE_NAME:$CI_COMMIT_SHA
      --cache=true
      --cache-ttl=24h
  tags:
    - cicd

deploy:
  stage: deploy
  image: alpine:latest
  rules:
    - if: $CI_COMMIT_BRANCH == $TARGET_BRANCH
  before_script:
    - apk add --no-cache openssh-client
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan vps.purintech.id.vn >> ~/.ssh/known_hosts
  script:
    - echo "Deploying to server..."
    - |
      ssh -o StrictHostKeyChecking=no fsoftguy@vps.purintech.id.vn "
        echo 'Login to GitLab Container Registry...'
        echo $CI_JOB_TOKEN | docker login $CI_REGISTRY --username gitlab-ci-token --password-stdin

        echo 'Pull latest image...'
        docker pull $IMAGE_NAME:latest
        
        echo 'Stop and remove old container...'
        docker stop team03-webapi || true
        docker rm team03-webapi || true
        
        echo 'Start new container...'
        docker run -d --name team03-webapi -p 8080:80 --restart unless-stopped $IMAGE_NAME:latest
        
        echo 'Check deployment...'
        docker ps | grep team03-webapi
      "
  tags:
    - cicd
