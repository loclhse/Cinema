stages:
  - prepare
  - test
  - build

variables:
  TARGET_BRANCH: "CICD_2"
  IMAGE_NAME: "git.fa.edu.vn/hcm25_cpl_net_06/team03_be/team03-webapi"
  GIT_STRATEGY: none
  GIT_USERNAME: "fsa_HongTL"

default:
  image: mcr.microsoft.com/dotnet/sdk:8.0

prepare:
  stage: prepare
  image: mcr.microsoft.com/dotnet/sdk:8.0
  rules:
    - if: $CI_COMMIT_BRANCH == $TARGET_BRANCH
  script:
    - apt-get update && apt-get install -y git curl jq
    - echo "Configuring Git credentials..."
    - git config --global credential.helper store
    - echo "https://${GIT_USERNAME}:${GIT_ACCESS_TOKEN}@git.fa.edu.vn" > ~/.git-credentials
    - git config --global user.name "$GIT_USERNAME"
    - git config --global user.email "$GIT_USERNAME@users.noreply.gitlab.com"
    - echo "Testing Git authentication..."
    - git ls-remote "http://git.fa.edu.vn/hcm25_cpl_net_06/team03_be.git" || echo "Authentication test failed, but continuing"
    - echo "Prepare stage completed successfully"
  tags:
    - cicd

build:
  stage: build
  image: mcr.microsoft.com/dotnet/sdk:8.0
  rules:
    - if: $CI_COMMIT_BRANCH == $TARGET_BRANCH
  before_script:
    - apt-get update && apt-get install -y openssh-client curl tar gzip git
    - echo "Configuring Git authentication..."
    - git config --global credential.helper store
    - echo "https://${GIT_USERNAME}:${GIT_ACCESS_TOKEN}@git.fa.edu.vn" > ~/.git-credentials
    - git config --global user.name "$GIT_USERNAME"
    - git config --global user.email "$GIT_USERNAME@users.noreply.gitlab.com"
    - echo "Cloning repository..."
    - git clone -b $TARGET_BRANCH "http://git.fa.edu.vn/hcm25_cpl_net_06/team03_be.git" project_source || exit 1
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - printf '%s\n' "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - eval $(ssh-agent -s)
    - ssh-add ~/.ssh/id_rsa
    - ssh-keyscan -H vps.purintech.id.vn >> ~/.ssh/known_hosts 2>/dev/null || echo "SSH keyscan failed"
  script:
    - echo "Transferring source code to server for Docker build and database deployment..."
    - echo "Preparing optimized source code archive..."
    - cd project_source
    - echo "Excluding unnecessary files from archive..."
    - tar --exclude='*.git*' --exclude='bin' --exclude='obj' --exclude='*.vs*' --exclude='node_modules' -czf ../project.tar.gz .
    - cd ..
    - echo "Archive size $(du -h project.tar.gz | cut -f1)"
    - echo "Checking server disk space and uploading source code..."
    - ssh -o StrictHostKeyChecking=no fsoftguy@vps.purintech.id.vn "df -h ~/ && echo 'Available space checked'"
    - echo "Uploading source code (with retry logic)..."
    - |
      for i in {1..3}; do
        echo "Upload attempt $i/3..."
        if scp -o StrictHostKeyChecking=no -o ConnectTimeout=60 project.tar.gz fsoftguy@vps.purintech.id.vn:~/project.tar.gz; then
          echo "Upload successful!"
          break
        else
          echo "Upload failed on attempt $i"
          if [ $i -eq 3 ]; then
            echo "All upload attempts failed!"
            exit 1
          fi
          sleep 5
        fi
      done
    - |
      timeout 600 ssh -o StrictHostKeyChecking=no -o ConnectTimeout=30 -o ServerAliveInterval=60 fsoftguy@vps.purintech.id.vn "
        set -e
        echo 'Creating build directory...'
        BUILD_DIR=~/docker-builds/team03-build-\$(date +%Y%m%d-%H%M%S)
        mkdir -p \$BUILD_DIR
        echo \"Build directory: \$BUILD_DIR\"
        
        echo 'Moving source code to build directory...'
        cd \$BUILD_DIR
        mv ~/project.tar.gz .
        tar -xzf project.tar.gz
        rm project.tar.gz
        
        echo 'Setting up Docker environment...'
        export PATH=\"\$HOME/bin:\$PATH\"
        export DOCKER_HOST=\"unix:///run/user/\$(id -u)/docker.sock\"
        
        systemctl --user start docker.service 2>/dev/null || echo 'Docker service already running'
        sleep 3
        
        echo 'Testing Docker access...'
        if docker version > /dev/null 2>&1; then
          echo 'Rootless Docker accessible!'
          echo \"Docker version: \$(docker version --format '{{.Server.Version}}')\"
        else
          echo 'Docker not accessible!'
          echo 'Checking Docker service status:'
          systemctl --user status docker.service
          exit 1
        fi
        
        echo 'Checking Dockerfile...'
        if [ ! -f Dockerfile ]; then
          echo 'ERROR: Dockerfile not found!'
          ls -la
          exit 1
        fi
        
        echo 'Logging into GitLab Container Registry...'
        echo 'Skipping registry login - using local images only'
        
        echo 'Building Docker image...'
        docker build -t 'team03-webapi:latest' -t 'team03-webapi:$CI_COMMIT_SHA' .
        
        if [ \$? -eq 0 ]; then
          echo 'Docker build successful!'
          echo 'BUILD_STATUS=SUCCESS' > ~/build_status.txt
          
          echo 'Deploying full stack (API + Database + Elasticsearch)...'
          echo 'Setting up production environment variables...'
          
          # Export environment variables for production
          export DB_PASSWORD='team03_secure_pass_2024'
          export JWT_SECRET_KEY='GvlKp62o31vaP3WzWsQDO3hOQpZdbhtt'
          export VNPAY_TMN_CODE='7QRTMNBH'
          export VNPAY_HASH_SECRET='4046G9C8YY9H8WFSJG8AVB9VZNTT1D68'
          export EMAIL_PASSWORD='jurk cvow hmtg dovz'
          
          # Step 1: Stop existing services
          echo 'Stopping existing services...'
          docker-compose -f docker-compose.production.yml down 2>/dev/null || echo 'No existing services running'
          
          # Step 2: Clean up old containers and volumes if needed
          echo 'Cleaning up old containers...'
          docker container prune -f 2>/dev/null || echo 'Container cleanup completed'
          
          # Step 3: Deploy full stack
          echo 'Starting full stack deployment...'
          docker-compose -f docker-compose.production.yml up -d
          
          if [ \$? -eq 0 ]; then
            echo 'Full stack deployment successful!'
            
            echo 'Waiting for services to initialize...'
            sleep 20
            
            echo 'Checking service status...'
            docker-compose -f docker-compose.production.yml ps
            
            echo 'Testing database connection...'
            DB_STATUS=\$(docker exec team03-db pg_isready -U postgres -d team03_db 2>/dev/null || echo 'NOT_READY')
            echo \"Database status: \$DB_STATUS\"
            
            echo 'Testing elasticsearch...'
            ES_STATUS=\$(docker exec team03-elasticsearch curl -f http://localhost:9200/_cluster/health 2>/dev/null || echo 'NOT_READY')
            echo \"Elasticsearch status: \$ES_STATUS\"
            
            echo 'Testing API application...'
            sleep 10
            API_HEALTH=\$(curl -s -o /dev/null -w \"%{http_code}\" http://localhost:8081 2>/dev/null || echo '000')
            echo \"API health check response: \$API_HEALTH\"
            
            if [ \"\$API_HEALTH\" != \"000\" ]; then
              echo 'API is responding!'
            else
              echo 'API not responding yet, checking logs...'
              docker logs team03-webapi 2>/dev/null | tail -20 || echo 'No API logs available'
            fi
            
            # Display service URLs
            echo ''
            echo '======= FULL STACK DEPLOYMENT SUCCESSFUL ======='
            echo '🌐 Application URL: http://vps.purintech.id.vn:8081'
            echo '📚 API Base URL: http://vps.purintech.id.vn:8081/api'
            echo '📖 Swagger UI: http://vps.purintech.id.vn:8081/swagger'
            echo '❤️ Health Check: http://vps.purintech.id.vn:8081/health'
            echo '🗄️ Database: PostgreSQL on port 5432 (internal)'
            echo '🔍 Elasticsearch: http://vps.purintech.id.vn:9200'
            echo '================================================='
            echo 'Full stack is now live and accessible!'
            echo 'BUILD_STATUS=SUCCESS' > ~/build_status.txt
          else
            echo 'ERROR: Full stack deployment failed!'
            echo 'Checking docker-compose logs...'
            docker-compose -f docker-compose.production.yml logs --tail=50 || echo 'No compose logs available'
            echo 'BUILD_STATUS=DEPLOY_FAILED' > ~/build_status.txt
          fi
        else
          echo 'Docker build failed!'
          echo 'BUILD_STATUS=BUILD_FAILED' > ~/build_status.txt
        fi
        
        echo 'Cleaning up build directory...'
        cd ~
        rm -rf \$BUILD_DIR
        
        echo 'Build process completed!'
      "
    - ssh -o StrictHostKeyChecking=no fsoftguy@vps.purintech.id.vn "cat ~/build_status.txt 2>/dev/null || echo 'BUILD_STATUS=UNKNOWN'" > build_status.txt
    - cat build_status.txt
  artifacts:
    reports:
      dotenv: build_status.txt
    expire_in: 1 hour
  tags:
    - cicd
