# GitLab CI/CD Pipeline for .NET Core Web API
# Compatible with runner #411 (tags: deploy, docker)

variables:
  DOTNET_VERSION: "8.0"
  SOLUTION_PATH: "WebAPI/WebAPI.sln"
  PROJECT_PATH: "WebAPI/WebAPI/WebAPI.csproj"
  TEST_PATH: "WebAPI/ZTest/ZTest.csproj"
  DOCKER_IMAGE_NAME: "team03-webapi"
  TARGET_BRANCH: "CICD_2"
  GIT_USERNAME: "fsa_HongTL"

# Default configuration for all jobs
default:
  image: mcr.microsoft.com/dotnet/sdk:8.0

stages:
  - test
  - docker
  - deploy

# Run unit tests
unit-tests:
  stage: test
  tags:
    - cicd
  before_script:
    - echo "=== Debug Git Authentication ==="
    - 'if [ -z "${GIT_ACCESS_TOKEN}" ]; then echo "ERROR: GIT_ACCESS_TOKEN is empty!"; exit 1; else echo "GIT_ACCESS_TOKEN is set"; fi'
    - echo "Configuring Git authentication..."
    - git config --global url."https://${GIT_USERNAME}:${GIT_ACCESS_TOKEN}@git.fa.edu.vn/hcm25_cpl_net_06/team03_be.git/".insteadOf "https://git.fa.edu.vn/"
  script:
    - echo "=== Running Unit Tests ==="
    - echo "Current directory:"
    - pwd
    - echo "Available files and directories:"
    - ls -la
    - echo "Checking if WebAPI directory exists:"
    - if [ -d "WebAPI" ]; then echo "WebAPI directory found"; else echo "WebAPI directory NOT found"; fi
    - cd WebAPI
    - echo "WebAPI directory contents:"
    - ls -la
    - echo "Restoring packages..."
    - dotnet restore WebAPI.sln
    - echo "Building solution..."
    - dotnet build WebAPI.sln --configuration Release
    - echo "Running tests with coverage..."
    - mkdir -p TestResults
    - dotnet test ZTest/ZTest.csproj --configuration Release --no-build --logger trx --results-directory TestResults/
    - echo "=== Tests completed! ==="
  artifacts:
    when: always
    paths:
      - WebAPI/TestResults/
    reports:
      junit:
        - WebAPI/TestResults/*.trx
    expire_in: 1 week
  rules:
    - if: '$CI_COMMIT_REF_NAME == $TARGET_BRANCH'

# Code quality check
code-quality:
  stage: test
  tags:
    - cicd
  before_script:
    - echo "=== Debug Git Authentication ==="
    - 'if [ -z "${GIT_ACCESS_TOKEN}" ]; then echo "ERROR: GIT_ACCESS_TOKEN is empty!"; exit 1; else echo "GIT_ACCESS_TOKEN is set"; fi'
    - echo "Configuring Git authentication..."
    - git config --global url."https://${GIT_USERNAME}:${GIT_ACCESS_TOKEN}@git.fa.edu.vn/".insteadOf "https://git.fa.edu.vn/"
    - git config --global url."https://${GIT_USERNAME}:${GIT_ACCESS_TOKEN}@git.fa.edu.vn/".insteadOf "http://git.fa.edu.vn/"
  script:
    - echo "=== Code Quality Analysis ==="
    - echo "Current directory:"
    - pwd
    - echo "Available files:"
    - ls -la
    - cd WebAPI
    - echo "WebAPI directory contents:"
    - ls -la
    - echo "Restoring packages..."
    - dotnet restore WebAPI.sln
    - echo "Building solution..."
    - dotnet build WebAPI.sln --configuration Release
    - echo "Checking code format..."
    - dotnet format --verify-no-changes --verbosity diagnostic WebAPI.sln || echo "⚠️ Code formatting issues found"
    - echo "=== Code quality check completed! ==="
  allow_failure: true
  rules:
    - if: '$CI_COMMIT_REF_NAME == $TARGET_BRANCH'

# Build Docker image
docker-build:
  stage: docker
  tags:
    - cicd
  image: docker:24.0.5
  services:
    - docker:24.0.5-dind
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
    DOCKER_HOST: tcp://docker:2376
    DOCKER_TLS_VERIFY: 1
    DOCKER_CERT_PATH: "$DOCKER_TLS_CERTDIR/client"
  before_script:
    - echo "=== Docker Build Setup ==="
    - docker info
    - echo "Logging into GitLab Container Registry..."
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    - echo "=== Building Docker Image ==="
    - docker build -t $CI_REGISTRY_IMAGE/$DOCKER_IMAGE_NAME:$CI_COMMIT_SHORT_SHA .
    - docker build -t $CI_REGISTRY_IMAGE/$DOCKER_IMAGE_NAME:latest .
    - echo "Pushing images to registry..."
    - docker push $CI_REGISTRY_IMAGE/$DOCKER_IMAGE_NAME:$CI_COMMIT_SHORT_SHA
    - docker push $CI_REGISTRY_IMAGE/$DOCKER_IMAGE_NAME:latest
    - echo "=== Docker build completed successfully! ==="
  rules:
    - if: '$CI_COMMIT_REF_NAME == $TARGET_BRANCH'

# Deploy to staging
deploy-staging:
  stage: deploy
  tags:
    - cicd
  dependencies:
    - docker-build
  environment:
    name: staging
    url: http://staging.team03-api.local
  script:
    - echo "=== Deploying to Staging ==="
    - echo "Stopping existing containers..."
    - docker-compose -f docker-compose.yml down || true
    - echo "Pulling latest images..."
    - docker-compose -f docker-compose.yml pull
    - echo "Starting new containers..."
    - docker-compose -f docker-compose.yml up -d
    - echo "Waiting for application to start..."
    - sleep 30
    - echo "=== Deployment to staging completed! ==="
  rules:
    - if: '$CI_COMMIT_REF_NAME == $TARGET_BRANCH'

# Deploy to production (manual)
deploy-production:
  stage: deploy
  tags:
    - cicd
  dependencies:
    - docker-build
  environment:
    name: production
    url: http://team03-api.production.local
  script:
    - echo "=== Deploying to Production ==="
    - echo "Stopping existing containers..."
    - docker-compose -f docker-compose.yml down || true
    - echo "Pulling latest images..."
    - docker-compose -f docker-compose.yml pull
    - echo "Starting new containers..."
    - docker-compose -f docker-compose.yml up -d
    - echo "Waiting for application to start..."
    - sleep 30
    - echo "=== Deployment to production completed! ==="
  when: manual
  rules:
    - if: '$CI_COMMIT_REF_NAME == $TARGET_BRANCH'
