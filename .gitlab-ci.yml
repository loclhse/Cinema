stages:
  - prepare
  - test
  - build
  - deploy

variables:
  TARGET_BRANCH: "CICD_2"
  IMAGE_NAME: "$CI_REGISTRY_IMAGE/team03-webapi"
  GIT_STRATEGY: none
  GIT_USERNAME: "fsa_HongTL"
  # Docker variables for DinD
  DOCKER_TLS_CERTDIR: ""
  DOCKER_HOST: tcp://docker:2375

default:
  image: mcr.microsoft.com/dotnet/sdk:8.0

prepare:
  stage: prepare
  image: mcr.microsoft.com/dotnet/sdk:8.0
  rules:
    - if: $CI_COMMIT_BRANCH == $TARGET_BRANCH
  script:
    - apt-get update && apt-get install -y git curl jq
    - echo "Configuring Git credentials..."
    - git config --global credential.helper store
    - echo "https://${GIT_USERNAME}:${GIT_ACCESS_TOKEN}@git.fa.edu.vn" > ~/.git-credentials
    - git config --global user.name "$GIT_USERNAME"
    - git config --global user.email "$GIT_USERNAME@users.noreply.gitlab.com"
    - echo "Testing Git authentication..."
    - git ls-remote "http://git.fa.edu.vn/hcm25_cpl_net_06/team03_be.git" || echo "Authentication test failed, but continuing"
    - echo "Prepare stage completed successfully"
  tags:
    - cicd

build:
  stage: build
  image: docker:24.0.5
  services:
    - name: docker:24.0.5-dind
      alias: docker
      command: ["--tls=false"]
  rules:
    - if: $CI_COMMIT_BRANCH == $TARGET_BRANCH
  before_script:
    # Install git and other tools in Alpine
    - apk add --no-cache git openssh-client
    - echo "Configuring Git authentication..."
    - git config --global credential.helper store
    - echo "https://${GIT_USERNAME}:${GIT_ACCESS_TOKEN}@git.fa.edu.vn" > ~/.git-credentials
    - git config --global user.name "$GIT_USERNAME"
    - git config --global user.email "$GIT_USERNAME@users.noreply.gitlab.com"
    - echo "Cloning repository..."
    - git clone -b $TARGET_BRANCH "http://git.fa.edu.vn/hcm25_cpl_net_06/team03_be.git" project_source || exit 1
    - cd project_source
    # Wait for Docker daemon to be ready
    - until docker info; do echo "Waiting for Docker daemon..."; sleep 1; done
  script:
    - echo "Building Docker image in GitLab CI/CD (no server build needed)..."
    - echo "Current directory contents:"
    - ls -la
    - echo "Dockerfile content:"
    - cat Dockerfile
    
    # Login to GitLab Container Registry
    - echo "Logging into GitLab Container Registry..."
    - echo "$CI_JOB_TOKEN" | docker login "$CI_REGISTRY" --username gitlab-ci-token --password-stdin
    
    # Build Docker image using Dockerfile
    - echo "Building Docker image with Dockerfile..."
    - docker build -t "$IMAGE_NAME:latest" -t "$IMAGE_NAME:$CI_COMMIT_SHA" .
    
    # Push images to registry
    - echo "Pushing images to registry..."
    - docker push "$IMAGE_NAME:latest"
    - docker push "$IMAGE_NAME:$CI_COMMIT_SHA"
    
    # Verify images
    - echo "Build completed successfully!"
    - docker images | grep team03-webapi
    - echo "BUILD_STATUS=SUCCESS" > build_status.txt
    
  artifacts:
    reports:
      dotenv: project_source/build_status.txt
    expire_in: 1 hour
  tags:
    - cicd

deploy:
  stage: deploy
  image: alpine:latest
  rules:
    - if: $CI_COMMIT_BRANCH == $TARGET_BRANCH
  before_script:
    - apk add --no-cache openssh-client curl
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "Creating SSH key file..."
    - printf '%s\n' "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - eval $(ssh-agent -s)
    - ssh-add ~/.ssh/id_rsa
    - ssh-keyscan -H vps.purintech.id.vn >> ~/.ssh/known_hosts 2>/dev/null || echo "SSH keyscan failed, using StrictHostKeyChecking=no"
  script:
    - echo "Deploying pre-built Docker image to server..."
    - echo "Testing SSH connection..."
    - ssh -o StrictHostKeyChecking=no fsoftguy@vps.purintech.id.vn "echo 'SSH connection successful'"
    
    - |
      ssh -o StrictHostKeyChecking=no fsoftguy@vps.purintech.id.vn "
        echo 'Starting deployment process...'
        
        # Check if Docker is accessible (read-only commands, no sudo needed)
        if ! docker version > /dev/null 2>&1; then
          echo '=== DOCKER ACCESS ERROR ==='
          echo 'Docker is not accessible. User needs to be in docker group.'
          echo 'Please ask admin to run: usermod -aG docker fsoftguy'
          echo 'Then logout/login and try again.'
          echo '=========================='
          exit 1
        fi
        
        echo 'Docker is accessible, proceeding with deployment...'
        
        # Login to registry (no sudo needed if user in docker group)
        echo 'Logging into GitLab Container Registry...'
        echo '$CI_JOB_TOKEN' | docker login '$CI_REGISTRY' --username gitlab-ci-token --password-stdin
        
        # Pull the pre-built image from registry
        echo 'Pulling latest image from registry...'
        docker pull '$IMAGE_NAME:latest'
        
        # Stop and remove old container
        echo 'Stopping old container if exists...'
        docker stop team03-webapi 2>/dev/null || echo 'No existing container to stop'
        docker rm team03-webapi 2>/dev/null || echo 'No existing container to remove'
        
        # Start new container with the pre-built image
        echo 'Starting new container...'
        docker run -d \
          --name team03-webapi \
          -p 8080:8080 \
          --restart unless-stopped \
          '$IMAGE_NAME:latest'
        
        # Verify deployment
        echo 'Checking container status...'
        docker ps | grep team03-webapi
        
        # Health check
        echo 'Waiting for application to start...'
        sleep 10
        curl -f http://localhost:8080/health || echo 'Health endpoint not available yet'
        
        echo '=== DEPLOYMENT SUCCESSFUL ==='
        echo 'Application is running at: http://vps.purintech.id.vn:8080'
        echo 'Container status:'
        docker ps --format 'table {{.Names}}\t{{.Status}}\t{{.Ports}}' | grep team03-webapi
        echo '=========================='
      "
  tags:
    - cicd
